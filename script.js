/*******************************************************
  script.js - ‡∏â‡∏ö‡∏±‡∏ö Username Login + Firestore 
********************************************************/

// ======== Element References (Auth + App) ========
const authContainer = document.getElementById('auth-container');
const appContainer = document.getElementById('app-container');
const loginUsernameInput = document.getElementById('login-username');
const loginPasswordInput = document.getElementById('login-password');
const loginButton = document.getElementById('login-button');
const registerUsernameInput = document.getElementById('register-username');
const registerEmailInput = document.getElementById('register-email');
const registerPasswordInput = document.getElementById('register-password');
const registerButton = document.getElementById('register-button');
const logoutButton = document.getElementById('logout-button');
const authErrorDisplay = document.getElementById('auth-error');
const userDisplay = document.getElementById('user-display');
const xorModeBtn = document.getElementById('xorModeBtn');
const wordSpinnerModeBtn = document.getElementById('wordSpinnerModeBtn');
const emojiModeBtn = document.getElementById('emojiModeBtn');
const keywordSection = document.getElementById('keywordSection');
const keywordInput = document.getElementById('keywordInput');
const inputText = document.getElementById('inputText');
const outputText = document.getElementById('outputText');
const copyButton = document.getElementById('copyButton');
const clearButton = document.getElementById('clearButton');
const helpBtn = document.getElementById('helpBtn');
const helpModal = document.getElementById('helpModal');
const closeBtn = helpModal.querySelector('.close-btn');
const helpContent = document.getElementById('helpContent');

let currentMode = null;
let toastTimeout = null;

// ======== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Toast ========
function showToast(message, duration = 2500, isError = false) {
  const existingToast = document.querySelector('.toast-notification');
  if (existingToast) { clearTimeout(toastTimeout); existingToast.remove(); }
  const toast = document.createElement('div');
  toast.textContent = message;
  toast.className = 'toast-notification';
  if (isError) { toast.style.backgroundColor = 'rgba(244, 67, 54, 0.85)'; }
  document.body.appendChild(toast);
  toastTimeout = setTimeout(() => {
    toast.style.opacity = '0';
    setTimeout(() => toast.remove(), 300);
  }, duration - 300);
}

// ======== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Error ‡∏Ç‡∏≠‡∏á Auth ========
function showAuthError(message) {
    let displayMessage = message;
    if (message.includes('auth/invalid-email')) { displayMessage = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; }
    else if (message.includes('auth/user-not-found') || message.includes('auth/invalid-credential')) { displayMessage = 'Username (‡∏´‡∏£‡∏∑‡∏≠ Email) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; }
    else if (message.includes('auth/wrong-password')) { displayMessage = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; }
    else if (message.includes('auth/email-already-in-use')) { displayMessage = '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'; }
    else if (message.includes('auth/weak-password')) { displayMessage = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)'; }
    else if (message.includes('auth/missing-password')) { displayMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'; }
    else if (message.includes('auth/missing-email')) { displayMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•'; }
    else if (message.includes('Username check failed') || message.includes('Firestore write failed')) { displayMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Username ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'; }
    else if (message.includes('Username already exists')) { displayMessage = `Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß!`; }
    else if (message.includes('Username not found')) { displayMessage = `‡πÑ‡∏°‡πà‡∏û‡∏ö Username ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!`; }
    else if (message.includes('Invalid Username format')) { displayMessage = `Username ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (a-z), ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0-9) ‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î‡∏•‡πà‡∏≤‡∏á (_) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`; }
    else if (message.includes('Username too short') || message.includes('Username too long')) { displayMessage = `Username ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 3-30 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`; }

    if(authErrorDisplay) authErrorDisplay.textContent = `üö´ ${displayMessage}`; // Check if element exists
    showToast(`üö´ ${displayMessage}`, 4000, true);
}

// ======== Event Listener ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Register ========
if (registerButton) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    registerButton.addEventListener('click', async () => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ input elements ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô value
        if (!registerUsernameInput || !registerEmailInput || !registerPasswordInput) {
            console.error("Register form inputs not found!");
            showAuthError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô");
            return;
        }
        const username = registerUsernameInput.value.trim().toLowerCase();
        const email = registerEmailInput.value.trim();
        const password = registerPasswordInput.value;
        if(authErrorDisplay) authErrorDisplay.textContent = '';

        // Input Validation
        if (!username || !email || !password) { showAuthError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username, Email, ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"); return; }
        const usernameRegex = /^[a-z0-9_]+$/;
        if (!usernameRegex.test(username)) { showAuthError("Invalid Username format"); return; }
        if (username.length < 3 || username.length > 30) { showAuthError("Username too short or Username too long"); return; }
        if (password.length < 6) { showAuthError("auth/weak-password"); return; }

        try {
            // 1. ‡πÄ‡∏ä‡πá‡∏Ñ Username ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô Firestore
            console.log(`Checking username: ${username}`);
            const usernameRef = db.collection('usernames').doc(username);
            const usernameDoc = await usernameRef.get();
            if (usernameDoc.exists) {
                console.log(`Username ${username} already exists.`);
                showAuthError(`Username already exists`); return;
            }
            console.log(`Username ${username} is available.`);

            // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô Firebase Auth
            console.log(`Creating user in Auth for email: ${email}`);
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            console.log('Auth user created successfully! UID:', user.uid);

            // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
            console.log(`Writing user data to Firestore for UID: ${user.uid} and Username: ${username}`);
            const batch = db.batch();
            const userDocRef = db.collection('users').doc(user.uid);
            batch.set(userDocRef, {
                username: username,
                email: user.email,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            });
            batch.set(usernameRef, { // usernameRef ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1
                userId: user.uid,
                email: user.email
            });

            // 5. Commit Batch Write
            await batch.commit();
            console.log('Firestore write successful!');

            showToast(`‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${username}!`);
            registerUsernameInput.value = '';
            registerEmailInput.value = '';
            registerPasswordInput.value = '';

        } catch (error) {
            console.error('Registration failed:', error);
            if (error.code && error.code.startsWith('auth/')) {
                showAuthError(error.message);
            } else {
                showAuthError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
                if (auth.currentUser) {
                    console.warn("Auth user might have been created but Firestore write failed.");
                }
            }
        }
    });
} else {
    console.error("Register button not found!");
}


// ======== Event Listener ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Login ========
if (loginButton) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    loginButton.addEventListener('click', async () => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ input elements ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô value
        if (!loginUsernameInput || !loginPasswordInput) {
             console.error("Login form inputs not found!");
             showAuthError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
             return;
        }
        const usernameOrEmail = loginUsernameInput.value.trim();
        const password = loginPasswordInput.value;
        if(authErrorDisplay) authErrorDisplay.textContent = '';

        if (!usernameOrEmail || !password) { showAuthError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username (‡∏´‡∏£‡∏∑‡∏≠ Email) ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"); return; }

        try {
            let emailToLogin = usernameOrEmail;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Username ‡∏´‡∏£‡∏∑‡∏≠ Email
            if (!usernameOrEmail.includes('@')) {
                const usernameLower = usernameOrEmail.toLowerCase();
                console.log(`Input looks like username: ${usernameLower}. Querying Firestore...`);
                const usernameRef = db.collection('usernames').doc(usernameLower);
                const usernameDoc = await usernameRef.get();

                if (usernameDoc.exists) {
                    emailToLogin = usernameDoc.data().email;
                    console.log(`Username found! Corresponding email: ${emailToLogin}`);
                } else {
                    console.log(`Username ${usernameLower} not found in Firestore.`);
                    showAuthError(`Username not found`); return;
                }
            } else {
                console.log(`Input looks like email: ${emailToLogin}`);
            }

            // ‡πÉ‡∏ä‡πâ Email ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ Login Auth
            console.log(`Attempting Firebase Auth sign-in with email: ${emailToLogin}`);
            const userCredential = await auth.signInWithEmailAndPassword(emailToLogin, password);
            console.log('Login successful! User:', userCredential.user);

            loginUsernameInput.value = '';
            loginPasswordInput.value = '';

        } catch (error) {
            console.error('Login failed:', error);
            if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential' || error.code === 'auth/invalid-email') {
                showAuthError('Username (‡∏´‡∏£‡∏∑‡∏≠ Email) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
            } else {
                showAuthError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: ' + error.message);
            }
        }
    });
} else {
     console.error("Login button not found!");
}


// ======== Event Listener ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Logout ========
if (logoutButton) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logoutButton.addEventListener('click', () => {
        auth.signOut().then(() => {
            console.log('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!');
            showToast('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        }).catch((error) => {
            console.error('Logout Error:', error);
            showAuthError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: ' + error.message);
        });
    });
} else {
    console.error("Logout button not found!");
}


// ======== onAuthStateChanged ========
auth.onAuthStateChanged(async (user) => {
    if (user) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        console.log('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà:', user.email, 'UID:', user.uid);
        let displayNameToShow = user.email;
        try {
            console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UID: ${user.uid}`);
            const userDocRef = db.collection('users').doc(user.uid);
            const userDoc = await userDocRef.get();
            if (userDoc.exists) {
                const userData = userDoc.data();
                console.log('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Firestore:', userData);
                if (userData.username) {
                    displayNameToShow = userData.username;
                    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á username: ${displayNameToShow}`);
                } else { console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå username ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Firestore, ‡πÉ‡∏ä‡πâ email ‡πÅ‡∏ó‡∏ô'); }
            } else { console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UID ${user.uid} ‡πÉ‡∏ô Firestore!`); }
        } catch (error) { console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore:", error); }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        if(userDisplay) userDisplay.textContent = `| ${displayNameToShow}`;
        if(authContainer) authContainer.style.display = 'none';
        if(appContainer) appContainer.style.display = 'flex';
        if(authErrorDisplay) authErrorDisplay.textContent = '';

    } else {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        console.log('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
        if(authContainer) authContainer.style.display = 'block';
        if(appContainer) appContainer.style.display = 'none';
        if(userDisplay) userDisplay.textContent = '';

        // ‡∏•‡πâ‡∏≤‡∏á Spinner Inputs
        if (inputText) inputText.value = ''; if (outputText) outputText.value = ''; if (keywordInput) keywordInput.value = '';
        if (currentMode) {
           if(xorModeBtn) xorModeBtn.classList.remove('active'); if(wordSpinnerModeBtn) wordSpinnerModeBtn.classList.remove('active'); if(emojiModeBtn) emojiModeBtn.classList.remove('active');
           currentMode = null; if (typeof updateUI === 'function') updateUI();
        }
         // ‡∏•‡πâ‡∏≤‡∏á Auth Forms
        if(loginUsernameInput) loginUsernameInput.value = ''; if(loginPasswordInput) loginPasswordInput.value = '';
        if(registerUsernameInput) registerUsernameInput.value = ''; if(registerEmailInput) registerEmailInput.value = ''; if(registerPasswordInput) registerPasswordInput.value = '';
        if(authErrorDisplay) authErrorDisplay.textContent = '';
    }
});


// ######################################################################
// ########   ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô Spinner ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)                       ########
// ######################################################################

const ALLOWED_CHARS = '‡∏Å‡∏Ç‡∏Ñ‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ‡∏§‡πÜ‡∏∞‡∏±‡∏≤‡∏¥‡∏µ‡∏∂‡∏∑‡∏∏‡∏π‡πÄ‡πÅ‡πÇ‡πÉ‡πÑ‡πÖ‡∏≥‡πà‡πâ‡πä‡πãabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,./<>?‡πêŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©';
const DEFAULT_KEYWORD = 'jornjud';
const DEFAULT_PREFIX = '~';
const SEED_LENGTH = 4;
function generateShortSeed() { return Math.random().toString(36).slice(-SEED_LENGTH).padStart(SEED_LENGTH, '0'); }
function createPRNG(seed) { const seedHash = [...seed].reduce((hash, ch) => (hash * 31 + ch.charCodeAt(0)) & 0x7fffffff, 0); let state = seedHash; return () => { state = (state * 1103515245 + 12345) & 0x7fffffff; return state / 0x80000000; }; }
const pigpenEmojis = ['üòÄ','üòÅ','üòÇ','ü§£','üòÉ','üòÑ','üòÖ','üòÜ','üòâ','üòä', 'üòã','üòé','üòç','üòò','üòó','üòô','üòö','üôÇ','ü§ó','ü§©','ü§î','ü§®','üòê','üòë','üò∂','üôÑ','üòè','üò£','üò•','üòÆ', 'ü§ê','üòØ','üò™','üò´','üò¥','üòå','üòõ','üòú','üòù','ü§§','üòí','üòì','üòî','üòï','üôÉ','ü§ë','üò≤','‚òπÔ∏è','üôÅ','üòñ', 'üòû','üòü','üò§','üò¢','üò≠','üò¶','üòß','üò®','üò©','ü§Ø','üò¨','üò∞','üò±','ü•µ','ü•∂','üò≥','ü§™','üòµ','üò°','üò†', 'ü§¨','üò∑','ü§í','ü§ï','ü§¢','ü§Æ','ü§ß','üòá','ü•∞','ü§†','ü§°','ü•≥','ü•¥','ü•∫','ü§•','ü§´','ü§≠','üßê','ü§ì','üòà', 'üëø','üëπ','üë∫','üíÄ','üëª','üëΩ','ü§ñ','üí©','üò∫','üò∏','üòπ','üòª','üòº','üòΩ','üôÄ','üòø','üòæ','üê∂','üê±','üê≠', 'üêπ','üê∞','ü¶ä','üêª','üêº','üê®','üêØ','ü¶Å','üêÆ','üê∑','üêΩ','üê∏','üêµ','üôà','üôâ','üôä','üêí','üêî','üêß','üê¶', 'üê§','üê£','üê•','ü¶Ü','ü¶Ö','ü¶â','ü¶á','üê∫','üêó','üê¥','ü¶Ñ','üêù','üêõ','ü¶ã','üêå','üêû','üêú','ü¶ó','üï∑','üï∏', 'ü¶Ç','üê¢','üêç','ü¶é','ü¶ñ','ü¶ï','üêô','ü¶ë','ü¶ê','ü¶Ä','üê°','üê†','üêü','üê¨','üê≥','üêã','ü¶à','üêä','üêÖ','üêÜ', 'ü¶ì','ü¶ç','üêò','ü¶è','üê™','üê´','ü¶í','ü¶ò','üêÉ','üêÇ','üêÑ','üêé','üêñ','üêè','üêë','üêê','üêì','ü¶É','üïä','üêá', 'üêÅ','üêÄ','üêø','ü¶î','üêæ','üêâ','üê≤','üåµ','üéÑ','üå≤','üå≥','üå¥','üå±','üåø','‚òòÔ∏è','üçÄ','üéç','üéã','üçÉ','üçÇ', 'üçÅ','üçÑ','üåæ','üíê','üå∑','üåπ','ü•Ä','üå∫','üå∏','üåº','üåª','üåû','üåù','üåõ','üåö','üåú','üåô','‚≠ê','üåü','üí´', '‚ú®','‚ö°','‚òÑÔ∏è','üí•','üî•','üå™','üåà','‚òÄÔ∏è','üå§','‚õÖ','üå•','‚òÅÔ∏è','üå¶','üåß','‚õà','üå©','üå®','‚ùÑÔ∏è','‚òÉÔ∏è','‚õÑ', 'üå¨','üí®','üíß','üí¶','‚òî','‚òÇÔ∏è','üåä','üå´','üçè','üçé','üçê','üçä','üçã','üçå','üçâ','üçá','üçì','üçà','üçí','üçë', 'ü•≠','üçç','ü••','ü•ù','üçÖ','üçÜ','ü•ë','ü•¶','ü•¨','ü•í','üå∂','üåΩ','ü•ï','ü•î','üç†','ü•ê','üçû','ü•ñ','ü•®','üßÄ', 'ü•ö','üç≥','ü•û','ü•ì','ü•©','üçó','üçñ','üå≠','üçî','üçü','üçï','ü•™','ü•ô','üåÆ','üåØ','ü•ó','ü•ò','üçù','üçú','üç≤', 'üç•','ü•†','üç£','üç±','üçõ','üçö','üçô','üçò','üç¢','üç°','üçß','üç®','üç¶','ü•ß','üßÅ','üç∞','üéÇ','üçÆ','üç≠','üç¨', 'üç´','üçø','üç©','üç™','üå∞','ü•ú','üçØ','ü•õ','üçº','‚òï','üçµ','ü•§','üç∂','üç∫','üçª','ü•Ç','üç∑','ü•É','üç∏','üçπ', 'üçæ','ü•Ñ','üç¥','üçΩ','ü•£','ü•°','ü•¢','üöó','üöï','üöô','üöå','üöé','üèé','üöì','üöë','üöí','üöê','üöö','üöõ','üöú', 'üõ¥','üö≤','üõµ','üèç','üö®','üöî','üöç','üöò','üöñ','üö°','üö†','üöü','üöÉ','üöã','üöû','üöù','üöÑ','üöÖ','üöà','üöÇ', 'üöÜ','üöá','üöä','üöâ','‚úàÔ∏è','üõ´','üõ¨','üõ©','üí∫','üõ∞','üöÄ','üõ∏','üöÅ','üõ∂','‚õµ','üö§','üõ•','üõ≥','‚õ¥','üö¢', '‚öì','üöß','‚õΩ','üöè','üö¶','üö•','üó∫','üóø','üóΩ','‚õ≤','üóº','üè∞','üèØ','üé°','üé¢','üé†','‚õ±','üèñ','üèù','üåã', '‚õ∞','üèî','üóª','üèï','‚õ∫','üè†','üè°','üèò','üèö','üèó','üè≠','üè¢','üè¨','üè£','üè§','üè•','üè¶','üè®','üè™','üè´', 'üè©','üíí','üèõ','‚õ™','üïå','üïç','üïã','‚õ©','üõ§','üõ£','üóæ','üéë','üèû','üåÖ','üåÑ','üå†','üéá','üéÜ','üåá','üåÜ', 'üèô','üåÉ','üåå','üåâ','üåÅ'];
const charToEmoji = new Map(); const emojiToChar = new Map();
for (let i = 0; i < ALLOWED_CHARS.length && i < pigpenEmojis.length; i++) { charToEmoji.set(ALLOWED_CHARS[i], pigpenEmojis[i]); emojiToChar.set(pigpenEmojis[i], ALLOWED_CHARS[i]); }
function encodeEmoji(text) { return [...text].map(ch => charToEmoji.get(ch) || ch).join(''); }
function decodeEmoji(text) { const emojiArray = Array.from(text); return emojiArray.map(emoji => emojiToChar.get(emoji) || emoji).join(''); }
function isAllEmoji(str) { const emojiArray = Array.from(str); return emojiArray.every(emoji => emojiToChar.has(emoji) || /\s/.test(emoji)); }
function encodeWordspinner(text) { const chars = [...text]; const seed = generateShortSeed(); const prng = createPRNG(seed); const positions = chars.map((_, i) => i).sort(() => prng() - 0.5); const shuffledText = positions.map(pos => chars[pos]).join(''); return `${DEFAULT_PREFIX}${seed}${shuffledText}`; }
function decodeWordspinner(text) { if (!text.startsWith(DEFAULT_PREFIX) || text.length < (DEFAULT_PREFIX.length + SEED_LENGTH)) return text; const seed = text.slice(DEFAULT_PREFIX.length, DEFAULT_PREFIX.length + SEED_LENGTH); const cipherText = text.slice(DEFAULT_PREFIX.length + SEED_LENGTH); if (cipherText.length === 0) return ''; const prng = createPRNG(seed); const positions = [...Array(cipherText.length).keys()].sort(() => prng() - 0.5); const reversePositions = new Array(cipherText.length); positions.forEach((shuffledIndex, originalIndex) => { reversePositions[shuffledIndex] = originalIndex; }); return reversePositions.map(pos => cipherText[pos]).join(''); }
function isLikelyWordspinner(text) { return text.startsWith(DEFAULT_PREFIX) && text.length >= (DEFAULT_PREFIX.length + SEED_LENGTH); }
function encodeThaiEng(text, keyword) { const seed = generateShortSeed(); const prng = createPRNG(seed + keyword); return seed + [...text].map(ch => { const idx = ALLOWED_CHARS.indexOf(ch); if (idx === -1) return ch; const randOffset = Math.floor(prng() * ALLOWED_CHARS.length); return ALLOWED_CHARS[(idx + randOffset) % ALLOWED_CHARS.length]; }).join(''); }
function decodeThaiEng(encText, keyword) { if (!encText || encText.length < SEED_LENGTH) return encText; const seed = encText.slice(0, SEED_LENGTH); const cipherText = encText.slice(SEED_LENGTH); if (cipherText.length === 0) return ''; const prng = createPRNG(seed + keyword); return [...cipherText].map(ch => { const idx = ALLOWED_CHARS.indexOf(ch); if (idx === -1) return ch; const randOffset = Math.floor(prng() * ALLOWED_CHARS.length); return ALLOWED_CHARS[(idx - randOffset % ALLOWED_CHARS.length + ALLOWED_CHARS.length) % ALLOWED_CHARS.length]; }).join(''); }
function isLikelyEncoded(text) { return /^[a-z0-9]{4}/.test(text) && text.length > SEED_LENGTH; }
function updateUI() { if(keywordSection) keywordSection.style.display = (currentMode === 'xor') ? 'flex' : 'none'; }
function processCurrentMode() { if (!auth.currentUser) { console.warn("User not logged in, cannot process."); showToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ", 3000, true); return; } const text = inputText.value; let result = ''; let action = ''; if (text.trim() === '') { if(outputText) outputText.value = ''; return; } if (!currentMode) { if(outputText) outputText.value = '‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô'; showToast('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô', 3000); return; } try { if (currentMode === 'xor') { let key = keywordInput.value.trim() || DEFAULT_KEYWORD; if (isLikelyEncoded(text)) { action = 'üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Key)...'; showToast(action); result = decodeThaiEng(text, key); } else { action = 'üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (Key)...'; showToast(action); result = encodeThaiEng(text.trim(), key); } } else if (currentMode === 'wordspinner') { if (isLikelyWordspinner(text)) { action = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Spinner)...'; showToast(action); result = decodeWordspinner(text); } else { action = '‚ú® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (Spinner)...'; showToast(action); result = encodeWordspinner(text.trim()); } } else if (currentMode === 'emoji') { if (isAllEmoji(text)) { action = 'üòÉ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Emoji)...'; showToast(action); result = decodeEmoji(text); } else { action = 'ü§™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (Emoji)...'; showToast(action); result = encodeEmoji(text.trim()); } } if(outputText) outputText.value = result; } catch (error) { console.error("Processing Error:", error); showToast(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 4000, true); if(outputText) outputText.value = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!'; } }

// ======== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç sendLog ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ========
function sendLog(input, output, mode, keyword) {
    // *** ‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏∂‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Deploy Apps Script ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î! ***
    const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbxkIJMiPz5HbBSDBKw-nmMvs3LPUa6RsR8AHtUoMMZcVpvHZbRhgGKYO62AoESBs8dufw/exec'; // <-- ‡∏ï‡∏£‡∏ß‡∏à URL ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ! ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ' ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢!

    const userIdentifier = auth.currentUser ? (auth.currentUser.email || auth.currentUser.uid) : 'anonymous';

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô fetch
    fetch(WEB_APP_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', },
      body: JSON.stringify({ input: input, output: output, mode: mode, keyword: keyword, user: userIdentifier }),
      mode: 'no-cors'
    })
    .then(response => { console.log('Log request sent (status might be opaque with no-cors).'); })
    .catch(error => { console.error('Logging failed:', error); showToast('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Log', 3000, true); });
}

// --- Event Listeners ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ---
[xorModeBtn, wordSpinnerModeBtn, emojiModeBtn].forEach(btn => { if(!btn) return; btn.addEventListener('click', () => { if (!auth.currentUser) { showToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î", 3000, true); return; } const newMode = btn.id.replace('ModeBtn', '').toLowerCase(); if (currentMode !== newMode) { currentMode = newMode; updateUI(); processCurrentMode(); [xorModeBtn, wordSpinnerModeBtn, emojiModeBtn].forEach(b => b.classList.remove('active')); btn.classList.add('active'); let modeName = ''; if (currentMode === 'xor') modeName = 'Key Translator'; else if (currentMode === 'wordspinner') modeName = 'Word Spinner'; else if (currentMode === 'emoji') modeName = 'Emoji Code'; showToast(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î ${modeName}`); } }); });
if(inputText) inputText.addEventListener('input', processCurrentMode);
if(keywordInput) keywordInput.addEventListener('input', () => { if (currentMode === 'xor' && auth.currentUser) { processCurrentMode(); } });
if(copyButton) copyButton.addEventListener('click', () => { if (!auth.currentUser) { showToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å", 3000, true); return; } if (!outputText || !outputText.value) { showToast('‚ùì ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å', 2000); return; } const inputToLog = inputText.value.trim(); const outputToLog = outputText.value; const modeToLog = currentMode; const keywordToLog = keywordInput.value.trim(); navigator.clipboard.writeText(outputToLog).then(() => { showToast('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß'); sendLog(inputToLog, outputToLog, modeToLog, keywordToLog); }).catch(err => { console.error('Clipboard API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ', err); try { if(outputText) { outputText.select(); outputText.setSelectionRange(0, 99999); } if (document.execCommand('copy')) { showToast('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡πà‡∏≤)'); sendLog(inputToLog, outputToLog, modeToLog, keywordToLog); } else { showToast('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏Å‡∏î Ctrl+C ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á'); } } catch (execErr) { console.error('‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Å‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', execErr); showToast('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏Å‡∏î Ctrl+C ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á'); } }); });
if(clearButton) clearButton.addEventListener('click', () => { if (!auth.currentUser) { showToast("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", 3000, true); return; } if(inputText) inputText.value = ''; if(outputText) outputText.value = ''; showToast('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß'); if(inputText) inputText.focus(); });
function showHelp() { if(!helpContent) return; helpContent.innerHTML = `<div><h3><i class="fas fa-key"></i> Key Translator Mode</h3><p>‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ Keyword (‡∏´‡∏≤‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô <code>${DEFAULT_KEYWORD}</code>) ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏î‡πâ‡∏ß‡∏¢ Keyword ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô</p></div><div><h3><i class="fas fa-smile"></i> Emoji Code Mode</h3><p>‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÑ‡∏ó‡∏¢, ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©, ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß) ‡πÄ‡∏õ‡πá‡∏ô Emoji ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á Emoji ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™</p></div><div><h3><i class="fas fa-sync-alt"></i> Word Spinner Mode</h3><p>‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Prefix <code>${DEFAULT_PREFIX}</code> ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™ Seed 4 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Prefix ‡πÅ‡∏•‡∏∞ Seed ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°</p></div><hr><p style="font-size: 0.9em; color: #777;">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ üòâ</p>`; if(helpModal) helpModal.style.display = 'block'; }
if(helpBtn) helpBtn.addEventListener('click', showHelp);
if(closeBtn) closeBtn.addEventListener('click', () => { if(helpModal) helpModal.style.display = 'none'; });
window.addEventListener('click', (event) => { if (event.target === helpModal) { if(helpModal) helpModal.style.display = 'none'; } });

if (typeof updateUI === 'function') updateUI();
console.log("‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Spinner ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)");
// ---- ‡∏à‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ----
